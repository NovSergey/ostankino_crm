"""new db

Revision ID: 58a0be4549e3
Revises: 
Create Date: 2025-05-17 18:47:55.041887

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '58a0be4549e3'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('groups',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('title')
    )
    op.create_table('notifications',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('time', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_read', sa.Boolean(), server_default='false', nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('objects',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('status', postgresql.ENUM('open', 'close', name='object_status_enum'), server_default='open', nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('phone', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), server_default='true', nullable=False),
    sa.Column('is_superuser', sa.Boolean(), server_default='false', nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('phone'),
    sa.UniqueConstraint('username')
    )
    op.create_table('employees',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('full_name', sa.String(length=100), nullable=False),
    sa.Column('phone', sa.String(), nullable=False),
    sa.Column('role', postgresql.ENUM('admin', 'employee', 'security', name='role_enum'), nullable=False),
    sa.Column('object_id', sa.Integer(), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('sanitary_table', postgresql.ENUM('main', 'car', 'tractor', name='sanitary_type_enum'), server_default='main', nullable=False),
    sa.Column('is_deleted', sa.Boolean(), server_default='false', nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['object_id'], ['objects.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('phone')
    )
    op.create_table('sanitary_breaks',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('object_from_id', sa.Integer(), nullable=False),
    sa.Column('object_to_id', sa.Integer(), nullable=False),
    sa.Column('time_break', sa.Integer(), nullable=False),
    sa.Column('sanitary_type', postgresql.ENUM('main', 'car', 'tractor', name='sanitary_type_enum'), nullable=False),
    sa.ForeignKeyConstraint(['object_from_id'], ['objects.id'], ),
    sa.ForeignKeyConstraint(['object_to_id'], ['objects.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('sanitary_changes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('sanitary_break_id', sa.Integer(), nullable=False),
    sa.Column('time_from', sa.Integer(), nullable=False),
    sa.Column('time_to', sa.Integer(), nullable=False),
    sa.Column('time_changed', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['sanitary_break_id'], ['sanitary_breaks.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('visit_history',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('entry_time', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('exit_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('object_id', sa.Integer(), nullable=False),
    sa.Column('scanned_by_user_id', sa.Uuid(), nullable=False),
    sa.Column('employee_id', sa.Uuid(), nullable=False),
    sa.Column('status', postgresql.ENUM('success', 'error', name='visit_status_enum'), nullable=False),
    sa.Column('was_reported_missing_exit', sa.Boolean(), server_default='false', nullable=False),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ),
    sa.ForeignKeyConstraint(['object_id'], ['objects.id'], ),
    sa.ForeignKeyConstraint(['scanned_by_user_id'], ['employees.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('visit_history')
    op.drop_table('sanitary_changes')
    op.drop_table('sanitary_breaks')
    op.drop_table('employees')
    op.drop_table('users')
    op.drop_table('objects')
    op.drop_table('notifications')
    op.drop_table('groups')

    op.execute('DROP TYPE sanitary_type_enum')
    op.execute('DROP TYPE object_status_enum')
    op.execute('DROP TYPE role_enum')
    op.execute('DROP TYPE visit_status_enum')

    # ### end Alembic commands ###
